{"ast":null,"code":"import _initializerDefineProperty from \"/Volumes/9/mine/code/reactMobx/reactmobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Volumes/9/mine/code/reactMobx/reactmobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Volumes/9/mine/code/reactMobx/reactmobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action, computed } from \"mobx\";\nimport moment from 'moment';\nlet AppStore = (_class = (_temp = class AppStore {\n  constructor() {\n    _initializerDefineProperty(this, \"time\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"todos\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"addTodo\", _descriptor3, this);\n  }\n\n  get desc() {\n    return `${this.time}还有${this.todos.length}条任务待完成`;\n  }\n\n  deleteTodo() {\n    this.todos.pop();\n  }\n\n  resetTodo() {\n    this.todos = [];\n  }\n\n  getNow() {\n    this.time = moment().format('YYYY-MM-DD HH:mm:ss');\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"time\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '2020';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"todos\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"desc\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"desc\"), _class.prototype), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"addTodo\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return todo => {\n      this.todos.push(todo);\n      console.log(\"time\", this.time);\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"deleteTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"deleteTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"resetTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"resetTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getNow\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getNow\"), _class.prototype)), _class);\nconst store = new AppStore();\nsetInterval(() => {\n  store.getNow();\n}, 1000);\nexport default store;","map":{"version":3,"sources":["/Volumes/9/mine/code/reactMobx/reactmobx/src/store/index.js"],"names":["observable","action","computed","moment","AppStore","desc","time","todos","length","deleteTodo","pop","resetTodo","getNow","format","todo","push","console","log","store","setInterval"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA4C,MAA5C;AACA,OAAOC,MAAP,MAAmB,QAAnB;IACMC,Q,sBAAN,MAAMA,QAAN,CAAc;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAGV,MAAcC,IAAd,GAAoB;AAChB,WAAQ,GAAE,KAAKC,IAAK,KAAI,KAAKC,KAAL,CAAWC,MAAO,QAA1C;AACH;;AAKOC,EAAAA,UAAR,GAAoB;AAChB,SAAKF,KAAL,CAAWG,GAAX;AACH;;AACOC,EAAAA,SAAR,GAAmB;AACf,SAAKJ,KAAL,GAAa,EAAb;AACH;;AACOK,EAAAA,MAAR,GAAgB;AACZ,SAAKN,IAAL,GAAYH,MAAM,GAAGU,MAAT,CAAgB,qBAAhB,CAAZ;AACH;;AAlBS,C,8EACTb,U;;;;;WAAkB,M;;yEAClBA,U;;;;;WAAmB,E;;yDACnBE,Q,wJAGAD,M;;;;;WAAkBa,IAAD,IAAQ;AACvB,WAAKP,KAAL,CAAWQ,IAAX,CAAgBD,IAAhB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmB,KAAKX,IAAxB;AACF,K;;+DACAL,M,iJAGAA,M,6IAGAA,M;AAKL,MAAMiB,KAAK,GAAG,IAAId,QAAJ,EAAd;AAEAe,WAAW,CAAC,MAAI;AACZD,EAAAA,KAAK,CAACN,MAAN;AACH,CAFU,EAET,IAFS,CAAX;AAIA,eAAeM,KAAf","sourcesContent":["import { observable, action ,computed} from \"mobx\";\nimport moment from 'moment';\nclass AppStore{\n    @observable time = '2020'\n    @observable todos = []\n    @computed get desc(){\n        return `${this.time}还有${this.todos.length}条任务待完成`\n    }\n    @action addTodo = (todo)=>{\n       this.todos.push(todo);\n       console.log(\"time\",this.time)\n    }\n    @action deleteTodo(){\n        this.todos.pop()\n    }\n    @action resetTodo(){\n        this.todos = []\n    }\n    @action getNow(){\n        this.time = moment().format('YYYY-MM-DD HH:mm:ss')\n    }\n}\n\nconst store = new AppStore()\n\nsetInterval(()=>{\n    store.getNow()\n},1000)\n\nexport default store"]},"metadata":{},"sourceType":"module"}